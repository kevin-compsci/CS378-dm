-- HW3.sql -- Homework 3
--
-- KEVIN NGUYEN
-- UT EID: kdn433, UTCS username: kxnguyen
-- CS f347, Spring 2017, Dr. P. Cannata
-- Department of Computer Science, The University of Texas at Austin
--
 
-- 5-01
SELECT COUNT(ORDER_ID) AS number_of_orders, SUM(TAX_AMOUNT) AS sum_of_orders from Orders;

-- 5-02
SELECT c.CATEGORY_NAME, COUNT(PRODUCT_ID) as product_count, MAX(LIST_PRICE) as most_expensive_product FROM PRODUCTS p INNER JOIN CATEGORIES c 
ON c.CATEGORY_ID = p.CATEGORY_ID
GROUP BY c.CATEGORY_NAME
ORDER BY MAX(LIST_PRICE) DESC;

-- 5-03
SELECT c.EMAIL_ADDRESS, SUM(o.ITEM_PRICE*o.QUANTITY) AS Item_Price_Total, SUM(o.DISCOUNT_AMOUNT*o.QUANTITY) AS Item_Discount_Total FROM CUSTOMERS c INNER JOIN ORDER_ITEMS o
ON c.CUSTOMER_ID = o.ORDER_ID
GROUP BY c.EMAIL_ADDRESS
ORDER BY SUM(o.ITEM_PRICE*o.QUANTITY) DESC;

-- 5-04
SELECT c.EMAIL_ADDRESS, COUNT(o.ORDER_ID) AS number_of_orders, SUM((o.ITEM_PRICE-o.DISCOUNT_AMOUNT)*o.QUANTITY) AS total_amount from CUSTOMERS c INNER JOIN ORDER_ITEMS o
ON c.CUSTOMER_ID = o.ORDER_ID
GROUP BY c.EMAIL_ADDRESS
HAVING COUNT(o.ORDER_ID) > 1
ORDER BY COUNT(o.ORDER_ID) DESC;

-- 5-05
SELECT c.EMAIL_ADDRESS, (select COUNT(o1.ORDER_ID) from ORDER_ITEMS o1 WHERE o1.ITEM_PRICE > 400) AS number_of_orders, (select SUM((o1.ITEM_PRICE-o1.DISCOUNT_AMOUNT)*o1.QUANTITY) from ORDER_ITEMS o1 WHERE o1.ITEM_PRICE > 400) AS total_amount from CUSTOMERS c INNER JOIN ORDER_ITEMS o1
ON c.CUSTOMER_ID = o1.ORDER_ID
GROUP BY c.EMAIL_ADDRESS
HAVING COUNT(o1.ORDER_ID) > 1
ORDER BY COUNT(o1.ORDER_ID) DESC;

-- 5-06
SELECT p.PRODUCT_NAME, SUM((o1.ITEM_PRICE-o1.DISCOUNT_AMOUNT)*o1.QUANTITY) AS Total_Amount FROM PRODUCTS p JOIN ORDER_ITEMS o1
ON p.PRODUCT_ID = o1.PRODUCT_ID
GROUP BY ROLLUP(p.PRODUCT_NAME);

-- 5-07
SELECT c.EMAIL_ADDRESS, COUNT(DISTINCT o1.ORDER_ID) as number_of_orders FROM CUSTOMERS c JOIN ORDERS o1
ON c.CUSTOMER_ID = o1.CUSTOMER_ID
JOIN ORDER_ITEMS o2
ON o1.ORDER_ID = o2.ORDER_ID
GROUP BY EMAIL_ADDRESS
HAVING COUNT(o1.CUSTOMER_ID) > 1;

-- 6-01
SELECT DISTINCT c.CATEGORY_NAME FROM CATEGORIES c 
WHERE CATEGORY_ID IN
  (SELECT p.CATEGORY_ID FROM PRODUCTS p)
ORDER BY CATEGORY_NAME;

-- 6-02
SELECT p.PRODUCT_NAME, p.LIST_PRICE FROM PRODUCTS p
WHERE p.PRODUCT_NAME IN
  (SELECT p1.PRODUCT_NAME FROM PRODUCTS p1)
ORDER BY p.LIST_PRICE DESC;

-- 6-03
SELECT c.CATEGORY_NAME FROM CATEGORIES c
WHERE NOT EXISTS
  (SELECT p.CATEGORY_ID FROM PRODUCTS p WHERE c.CATEGORY_ID = p.CATEGORY_ID);

-- 6-04
SELECT c.EMAIL_ADDRESS, MAX(v.ORDER_ID) as Order_ID, SUM(HighestCost) as Largest_Price FROM CUSTOMERS c INNER JOIN ORDERS o
ON c.CUSTOMER_ID = o.CUSTOMER_ID JOIN
  (select o1.ORDER_ID, ((o2.ITEM_PRICE-o2.DISCOUNT_AMOUNT)*o2.QUANTITY) AS HighestCost FROM ORDERS o1, ORDER_ITEMS o2 WHERE o1.ORDER_ID = o2.ORDER_ID) v
  ON v.ORDER_ID = o.ORDER_ID
GROUP BY c.EMAIL_ADDRESS;

-- 6-05
SELECT p.PRODUCT_NAME, p.DISCOUNT_PERCENT FROM PRODUCTS p
WHERE p.DISCOUNT_PERCENT NOT IN
  (select p1.DISCOUNT_PERCENT FROM PRODUCTS p1 WHERE p.PRODUCT_NAME <> p1.PRODUCT_NAME)
ORDER BY PRODUCT_NAME;

-- 6-06
SELECT c.EMAIL_ADDRESS, o.ORDER_ID, o.ORDER_DATE FROM CUSTOMERS c JOIN ORDERS o
ON c.CUSTOMER_ID = o.CUSTOMER_ID
WHERE o.ORDER_DATE = (select min(o.ORDER_DATE) from ORDERS o1 where c.CUSTOMER_ID = o1.CUSTOMER_ID);

